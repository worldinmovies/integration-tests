# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Integration Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        ports:
          - "127.0.0.1:5433:5432"
        env:
          POSTGRES_PASSWORD: postgres
          PGUSER: postgres
          TZ: Europe/Stockholm
        options: >-
          --health-cmd pg_isready
          --health-interval 30s
          --health-timeout 5s
          --health-retries 1
          --health-start-period 5s
      mongo:
        image: mongo:7-jammy
        ports:
          - "127.0.0.1:27017:27017"
        options: >-
          --health-cmd "mongosh --eval db.adminCommand('ping')"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 1
          --health-start-period 10s
      neo4j:
        image: neo4j:5
        ports:
          - "127.0.0.1:7474:7474"
          - "127.0.0.1:7687:7687"
        env:
          TZ: Europe/Stockholm
          NEO4J_AUTH: neo4j/secretpassword
        options: >-
          --health-cmd /var/lib/neo4j/bin/neo4j status
          --health-interval 30s
          --health-timeout 10s
          --health-retries 1
          --health-start-period 20s
      redis:
        image: redis:7-alpine
        ports:
          - "127.0.0.1:6379:6379"
        options: >-
          --health-cmd redis-cli ping | grep PONG
          --health-interval 30s
          --health-timeout 3s
          --health-retries 1
          --health-start-period 10s
      kafka:
        image: docker.io/bitnami/kafka:3.4
        ports:
          - "127.0.0.1:9092:9092"
          - "127.0.0.1:9093:9093"
        env:
          TZ: Europe/Stockholm
          ALLOW_ANONYMOUS_LOGIN: yes
          KAFKA_ENABLE_KRAFT: yes
          KAFKA_CFG_PROCESS_ROLES: broker,controller
          KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
          KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: LOCAL:PLAINTEXT,CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT
          KAFKA_BROKER_ID: 1001
          KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1001@kafka:9094
          ALLOW_PLAINTEXT_LISTENER: yes
          BITNAMI_DEBUG: yes
          KAFKA_CFG_NODE_ID: 1001
          KAFKA_KRAFT_CLUSTER_ID: OTMwNzFhYTY1ODNiNGE5OT
          KAFKA_CFG_KRAFT_REPLICATION_FACTOR: 1
          KAFKA_CFG_ADVERTISED_LISTENERS: LOCAL://127.0.0.1:9093,DOCKER://kafka:9092
          KAFKA_CFG_LISTENERS: LOCAL://:9093,CONTROLLER://:9094,DOCKER://:9092
          KAFKA_CFG_INTER_BROKER_LISTENER_NAME: DOCKER
          KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: 1
        options: >-
          --health-cmd kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic movie || true && kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --topic movie --describe
          --health-interval 30s
          --health-timeout 5s
          --health-retries 3
          --health-start_period 20s
          --privileged
      tmdb:
        image: seppaleinen/worldinmovies_tmdb:latest
        ports:
          - "127.0.0.1:8020:8020"
        options: >-
          --health-cmd curl -k --fail http://localhost:8020/health
          --health-interval 30s
          --health-timeout 2s
          --health-retries 1
          --health-start_period 15s
      neo4jservice:
        image: seppaleinen/worldinmovies_neo4j
        ports:
          - "127.0.0.1:8082:8082"
        options: >-
          --health-cmd curl --fail --silent localhost:8082/actuator/health | grep UP || exit 1
          --health-interval 10s
          --health-timeout 10s
          --health-retries 3
          --health-start_period 20s
      imdb:
        image: seppaleinen/worldinmovies_imdb
        ports:
          - "127.0.0.1:8000:8000"
        options: >-
          --health-cmd curl -k --fail https://localhost:8000/health
          --health-interval 30s
          --health-timeout 2s
          --health-retries 1
          --health-start_period 15s
      webapp:
        image: seppaleinen/worldinmovies_webapp
        ports:
          - "80:80"
          - "443:443"
        options: >-
          --health-cmd nc -vz -w1 localhost 443
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start_period 5s

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
        cache-dependency-path: cypress/package-lock.json
    - run: npm --prefix cypress install
      shell: bash
    - run: npm --prefix cypress run cypress:test
      shell: bash
    - name: Check errors
      if: ${{ failure() }}
      run: docker compose logs && docker ps -a
    - name: Stop containers
      if: ${{ always() }}
      run: docker-compose -f "docker-compose.yml" down

