# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Integration Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      trigger:
        description: 'app'
        required: false
        default: 'all'
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js 22.x
      uses: actions/setup-node@v3
      with:
        node-version: 22.x
        cache: 'npm'
        cache-dependency-path: cypress/package-lock.json
    - name: Start containers and run integration tests for ${{ github.event.inputs.trigger }}
      run: |
        echo "Triggered by: ${{ github.event.inputs.trigger }}"
        echo "VITE_WEBAPP_PORT=80" > .env
        echo "DJANGO_SECRET_KEY="$(uuidgen) >> .env
        docker compose up -d || docker compose up -d
        docker cp datasubset/tmdb.movie.json mongo:/
        docker cp datasubset/tmdb.flattened_movie.json mongo:/
        ./wait_until_running.sh
        docker exec mongo mongoimport -u seppa -p password -d tmdb -c movie --mode upsert --jsonArray --type json --file tmdb.movie.json
        docker exec mongo mongoimport -u seppa -p password -d tmdb -c movie --mode upsert --jsonArray --type json --file tmdb.flattened_movie.json
        npm --prefix cypress install
        npm --prefix cypress run cypress:test
      shell: bash
    - name: Check errors
      if: ${{ failure() }}
      run: |
        docker compose logs; docker ps -a
    - name: Stop containers
      if: ${{ always() }}
      run: docker compose -f "docker-compose.yml" down

